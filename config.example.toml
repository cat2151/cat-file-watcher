# Example configuration for cat-file-watcher
# This file demonstrates how to configure file monitoring and command execution

# Default interval for checking files (in milliseconds)
# This is used when a file doesn't specify its own interval
# Default: 1000 (1 second)
default_interval = 1000

# Interval for checking the config file itself for changes (in milliseconds)
# When the config file changes, it will be automatically reloaded
# Default: 1000 (1 second)
config_check_interval = 1000

# Optional: Log file path for command execution logging
# When specified, files with enable_log=true will log command execution details here
# log_file = "command_execution.log"

# Optional: Define time periods for file monitoring
# Files can specify a time_period to only be monitored during certain hours
# Time periods support spanning across midnight (e.g., 23:00-01:00)
[time_periods]
# Business hours: 9 AM to 5 PM
business_hours = { start = "09:00", end = "17:00" }

# After hours: 6 PM to 8 AM (spans midnight)
after_hours = { start = "18:00", end = "08:00" }

# Night shift: 11 PM to 1 AM (spans midnight)
night_shift = { start = "23:00", end = "01:00" }

# Midnight transition example from requirements: 23:59 to 00:01
midnight_window = { start = "23:59", end = "00:01" }

[files]
# Each entry defines a file to monitor and a command to execute when it changes
# Optional: specify 'interval' in milliseconds to override the default for this file
# Optional: specify 'suppress_if_process' with a regex pattern to skip command execution
#           when a process matching the pattern is running
# Optional: specify 'time_period' to only monitor the file during that time period
# Optional: specify 'enable_log = true' to log command execution to the log file (default: false)

# Example 1: Monitor a text file and display a message (uses default interval)
# "example.txt" = { command = "echo 'example.txt has been modified!'" }

# Example 2: Monitor a Python file and run tests (check every 2 seconds)
# "my_script.py" = { command = "python -m pytest tests/", interval = 2000 }

# Example 3: Monitor a config file and reload a service (check every 5 seconds)
# "/etc/myapp/config.ini" = { command = "systemctl reload myapp", interval = 5000 }

# Example 4: Monitor a log file frequently and send a notification (check every 500ms)
# "app.log" = { command = "notify-send 'Log Updated' 'app.log has new entries'", interval = 500 }

# Example 5: Monitor a document and create a backup (uses default interval)
# "document.txt" = { command = "cp document.txt document.txt.bak" }

# Example 6: Only run build when editor is not running (process suppression)
# Suppress command execution if a process matching the regex pattern is running
# This is useful to avoid rebuilding while you're actively editing
# "src/main.py" = { command = "make build", suppress_if_process = "vim|emacs|code" }

# Example 7: Only sync when specific sync process is not running
# "data.json" = { command = "rsync -av data.json backup/", suppress_if_process = "rsync" }

# Example 8: Monitor only during business hours
# "work_report.txt" = { command = "python generate_report.py", time_period = "business_hours" }

# Example 9: Monitor only during after hours (night time)
# "batch_data.csv" = { command = "./process_batch.sh", time_period = "after_hours" }

# Example 10: Combine time period with process suppression
# "code.py" = { command = "python -m pytest", time_period = "business_hours", suppress_if_process = "vim|code" }

# Example 11: Enable logging for a critical file (requires log_file to be set globally)
# "important.txt" = { command = "backup.sh", enable_log = true }

# Example 12: Monitor with logging and custom interval
# "config.json" = { command = "validate_config.sh", interval = 2000, enable_log = true }

# Example 13: Process health monitoring without file watching (empty filename)
# Executes command every second (default_interval) without monitoring any file
# Useful for process health checks, auto-restart, or periodic tasks
# "" = { command = "echo 'Health check at' $(date)" }

# Example 14: Auto-restart process when it's not running
# Using empty filename with suppress_if_process for process health monitoring
# Command only executes when the process is NOT running (suppressed when running)
# "" = { command = "./start_myapp.sh", suppress_if_process = "myapp", interval = 5000 }

# Example 15: Periodic cleanup task (runs every 10 seconds)
# "" = { command = "find /tmp -type f -mtime +7 -delete", interval = 10000 }

